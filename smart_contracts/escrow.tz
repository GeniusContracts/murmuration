parameter (or (or (nat %escrow) (pair %getBalance address (contract nat))) (or (pair %getPriorBalance (pair (address %address) (nat %level)) (contract (pair (address %address) (pair (nat %level) (nat %result))))) (nat %release)));
storage   (pair (pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))));
code
  {
    # Private variable: writeCheckpoint # pair @parameter @storage
    LAMBDA
      (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
      (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
      {
        UNPAIR 3;   # pair address (pair nat nat) : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        SWAP;       # list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        # if _x0.numCheckpoints == 0: # list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        PUSH nat 0; # nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        DUP 3;      # pair address (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        GET 3;      # nat : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        COMPARE;    # int : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        EQ;         # bool : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        IF
          {
            # self.data.checkpoints[(_x0.checkpointedAddress, 0)] = sp.record(fromBlock = sp.level, balance = _x0.newBalance) # list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            DIG 2;      # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            UNPAIR;     # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            UNPAIR;     # big_map address nat : pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            SWAP;       # pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            UNPAIR;     # big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            DUP 6;      # pair address (pair nat nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            GET 4;      # nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            LEVEL;      # @level : nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            PAIR;       # pair @level nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            SOME;       # option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            PUSH nat 0; # nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            DUP 8;      # pair address (pair nat nat) : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            CAR;        # address : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            PAIR;       # pair address nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            UPDATE;     # big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            PAIR;       # pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            SWAP;       # big_map address nat : pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            PAIR;       # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
            PAIR;       # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            # self.data.numCheckpoints[_x0.checkpointedAddress] = _x0.numCheckpoints + 1 # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            DUP;        # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            GET 3;      # big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            PUSH nat 1; # nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            DUP 5;      # pair address (pair nat nat) : nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            GET 3;      # nat : nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            ADD;        # nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            SOME;       # option nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
            DIG 4;      # pair address (pair nat nat) : option nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
            CAR;        # address : option nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
            UPDATE;     # big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
            UPDATE 3;   # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
            SWAP;       # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
          }
          {
            # if self.data.checkpoints[(_x0.checkpointedAddress, sp.as_nat(_x0.numCheckpoints - 1))].fromBlock == sp.level: # list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            LEVEL;      # @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            DUP 4;      # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            CAR;        # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            GET 3;      # big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            PUSH nat 1; # nat : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            DUP 5;      # pair address (pair nat nat) : nat : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            GET 3;      # nat : nat : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            SUB;        # int : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            ISNAT;      # option nat : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            IF_NONE
              {
                PUSH int 73; # int : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                FAILWITH;   # FAILED
              }
              {}; # @some : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            DUP 5;      # pair address (pair nat nat) : @some : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            CAR;        # address : @some : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            PAIR;       # pair address @some : big_map (pair address nat) (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            GET;        # option (pair nat nat) : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            IF_NONE
              {
                PUSH int 73; # int : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:73 # @some : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
              }; # @some : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            CAR;        # nat : @level : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            COMPARE;    # int : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            EQ;         # bool : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
            IF
              {
                # self.data.checkpoints[(_x0.checkpointedAddress, sp.as_nat(_x0.numCheckpoints - 1))] = sp.record(fromBlock = sp.level, balance = _x0.newBalance) # list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                DIG 2;      # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                UNPAIR;     # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                UNPAIR;     # big_map address nat : pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                SWAP;       # pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                UNPAIR;     # big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                DUP 6;      # pair address (pair nat nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                GET 4;      # nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                LEVEL;      # @level : nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                PAIR;       # pair @level nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                SOME;       # option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                PUSH nat 1; # nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                DUP 8;      # pair address (pair nat nat) : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                GET 3;      # nat : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                SUB;        # int : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                ISNAT;      # option nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                IF_NONE
                  {
                    PUSH int 74; # int : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                DIG 7;      # pair address (pair nat nat) : @some : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                CAR;        # address : @some : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                PAIR;       # pair address @some : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                UPDATE;     # big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                PAIR;       # pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                SWAP;       # big_map address nat : pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : pair (big_map address nat) (pair address nat) : list operation
                PAIR;       # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : pair (big_map address nat) (pair address nat) : list operation
                PAIR;       # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
                SWAP;       # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
              }
              {
                SWAP;       # pair address (pair nat nat) : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                # if self.data.checkpoints[(_x0.checkpointedAddress, sp.as_nat(_x0.numCheckpoints - 1))].balance != _x0.newBalance: # pair address (pair nat nat) : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                DUG 2;      # pair address (pair nat nat) : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                GET 4;      # nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                DUP 4;      # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                CAR;        # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                GET 3;      # big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                PUSH nat 1; # nat : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                DUP 5;      # pair address (pair nat nat) : nat : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                GET 3;      # nat : nat : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                SUB;        # int : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                ISNAT;      # option nat : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                IF_NONE
                  {
                    PUSH int 77; # int : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                DUP 5;      # pair address (pair nat nat) : @some : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                CAR;        # address : @some : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                PAIR;       # pair address @some : big_map (pair address nat) (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                GET;        # option (pair nat nat) : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                IF_NONE
                  {
                    PUSH int 77; # int : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:77 # @some : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                  }; # @some : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                CDR;        # nat : nat : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                COMPARE;    # int : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                NEQ;        # bool : list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                IF
                  {
                    # self.data.checkpoints[(_x0.checkpointedAddress, _x0.numCheckpoints)] = sp.record(fromBlock = sp.level, balance = _x0.newBalance) # list operation : pair address (pair nat nat) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                    DIG 2;      # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    UNPAIR;     # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    UNPAIR;     # big_map address nat : pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    SWAP;       # pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    UNPAIR;     # big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    DUP 6;      # pair address (pair nat nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    GET 4;      # nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    LEVEL;      # @level : nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    PAIR;       # pair @level nat : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    SOME;       # option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    DIG 6;      # pair address (pair nat nat) : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                    DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                    GET 3;      # nat : pair address (pair nat nat) : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                    SWAP;       # pair address (pair nat nat) : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                    DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation
                    DUG 8;      # pair address (pair nat nat) : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    CAR;        # address : nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    PAIR;       # pair address nat : option (pair @level nat) : big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    UPDATE;     # big_map (pair address nat) (pair nat nat) : big_map string bytes : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    PAIR;       # pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : big_map address nat : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    SWAP;       # big_map address nat : pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    PAIR;       # pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes)) : pair (big_map address nat) (pair address nat) : list operation : pair address (pair nat nat)
                    PAIR;       # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    # self.data.numCheckpoints[_x0.checkpointedAddress] = _x0.numCheckpoints + 1 # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    DUP;        # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    GET 3;      # big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    PUSH nat 1; # nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    DUP 5;      # pair address (pair nat nat) : nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    GET 3;      # nat : nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    ADD;        # nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    SOME;       # option nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation : pair address (pair nat nat)
                    DIG 4;      # pair address (pair nat nat) : option nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
                    CAR;        # address : option nat : big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
                    UPDATE;     # big_map address nat : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
                    UPDATE 3;   # pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)) : list operation
                    SWAP;       # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                  }
                  {
                    SWAP;       # pair address (pair nat nat) : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                    DROP;       # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
                  }; # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
              }; # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
          }; # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        UNIT;       # unit : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
        PAIR 3;     # pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))
      }; # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
    UNPAIR;     # @parameter : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
    IF_LEFT
      {
        IF_LEFT
          {
            # == escrow ==
            # sp.transfer(sp.list([sp.record(from_ = sp.sender, txs = sp.list([sp.record(to_ = sp.self_address, token_id = self.data.tokenID, amount = params.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.tokenContractAddress, entry_point='transfer').open_some()) # @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            NIL operation; # list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 3;      # @storage : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET 5;      # address : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF_NONE
              {
                PUSH int 171; # int : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PUSH mutez 0; # mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 6;      # @parameter%escrow : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 8;      # @storage : @parameter%escrow : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET 6;      # nat : @parameter%escrow : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SELF_ADDRESS; # @self : nat : @parameter%escrow : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR 3;     # pair @self (pair nat @parameter%escrow) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR;       # pair @sender (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            TRANSFER_TOKENS; # operation : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONS;       # list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # if ~ (self.data.balances.contains(sp.sender)): # list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 3;      # @storage : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # big_map address nat : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : big_map address nat : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            MEM;        # bool : list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF
              {}
              {
                # self.data.balances[sp.sender] = 0 # list operation : @parameter%escrow : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DIG 2;      # @storage : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                UNPAIR;     # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                UNPAIR;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PUSH (option nat) (Some 0); # option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                SENDER;     # @sender : option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                UPDATE;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PAIR;       # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PAIR;       # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DUG 2;      # list operation : @parameter%escrow : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
              }; # list operation : @parameter%escrow : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # self.data.balances[sp.sender] += params.value # list operation : @parameter%escrow : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DIG 2;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            UNPAIR;     # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            UNPAIR;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP;        # big_map address nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : big_map address nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP;        # @sender : @sender : big_map address nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUG 2;      # @sender : big_map address nat : @sender : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET;        # option nat : @sender : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF_NONE
              {
                PUSH int 203; # int : @sender : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }
              {}; # @some : @sender : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%escrow : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DIG 6;      # @parameter%escrow : @some : @sender : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            ADD;        # nat : @sender : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SOME;       # option nat : @sender : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SWAP;       # @sender : option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            UPDATE;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR;       # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR;       # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SWAP;       # list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # compute_escrow_207 = sp.local("compute_escrow_207", self.writeCheckpoint(sp.record(checkpointedAddress = sp.sender, numCheckpoints = self.data.numCheckpoints.get(sp.sender, default_value = 0), newBalance = self.data.balances[sp.sender]))) # list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUG 2;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation
            DUP;        # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation
            DUG 3;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CAR;        # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CAR;        # big_map address nat : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SENDER;     # @sender : big_map address nat : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            GET;        # option nat : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            IF_NONE
              {
                PUSH int 211; # int : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:211 # @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }; # @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DUP 4;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            GET 3;      # big_map address nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SENDER;     # @sender : big_map address nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            GET;        # option nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            IF_NONE
              {
                PUSH nat 0; # nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }
              {
                # of_some: Get-item:210 # @some : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }; # nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SENDER;     # @sender : nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            PAIR 3;     # pair @sender (pair nat @some) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SWAP;       # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : pair @sender (pair nat @some) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DUG 3;      # pair @sender (pair nat @some) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR 3;     # pair (pair @sender (pair nat @some)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            EXEC;       # pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))
            CDR;        # pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))
            UNPAIR;     # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
          }
          {
            DIG 2;      # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : @parameter%getBalance : @storage
            DROP;       # @parameter%getBalance : @storage
            SWAP;       # @storage : @parameter%getBalance
            # == getBalance ==
            # if ~ (self.data.balances.contains(sp.fst(params))): # @storage : @parameter%getBalance
            DUP;        # @storage : @storage : @parameter%getBalance
            DUG 2;      # @storage : @parameter%getBalance : @storage
            CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : @parameter%getBalance : @storage
            CAR;        # big_map address nat : @parameter%getBalance : @storage
            SWAP;       # @parameter%getBalance : big_map address nat : @storage
            DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address nat : @storage
            DUG 2;      # @parameter%getBalance : big_map address nat : @parameter%getBalance : @storage
            CAR;        # address : big_map address nat : @parameter%getBalance : @storage
            MEM;        # bool : @parameter%getBalance : @storage
            IF
              {}
              {
                SWAP;       # @storage : @parameter%getBalance
                # self.data.balances[sp.fst(params)] = 0 # @storage : @parameter%getBalance
                UNPAIR;     # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : @parameter%getBalance
                UNPAIR;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : @parameter%getBalance
                PUSH (option nat) (Some 0); # option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : @parameter%getBalance
                DUP 5;      # @parameter%getBalance : option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : @parameter%getBalance
                CAR;        # address : option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : @parameter%getBalance
                UPDATE;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : @parameter%getBalance
                PAIR;       # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : @parameter%getBalance
                PAIR;       # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @parameter%getBalance
                SWAP;       # @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }; # @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SWAP;       # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @parameter%getBalance
            # sp.result(self.data.balances[sp.fst(params)]) # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @parameter%getBalance
            DUP;        # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @parameter%getBalance
            DUG 2;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CAR;        # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CAR;        # big_map address nat : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SWAP;       # @parameter%getBalance : big_map address nat : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address nat : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DUG 2;      # @parameter%getBalance : big_map address nat : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CAR;        # address : big_map address nat : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            GET;        # option nat : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            IF_NONE
              {
                PUSH int 158; # int : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:158 # @some : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }; # @some : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            # sp.transfer(__s17.value, sp.tez(0), sp.snd(params)) # @some : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            NIL operation; # list operation : @some : @parameter%getBalance : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DIG 2;      # @parameter%getBalance : list operation : @some : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CDR;        # contract nat : list operation : @some : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            PUSH mutez 0; # mutez : contract nat : list operation : @some : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DIG 3;      # @some : mutez : contract nat : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            TRANSFER_TOKENS; # operation : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CONS;       # list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
          }; # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
      }
      {
        IF_LEFT
          {
            # == getPriorBalance ==
            # sp.verify(sp.fst(params).level < sp.level, 'BLOCK_LEVEL_TOO_SOON') # @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            LEVEL;      # @level : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SWAP;       # @parameter%getPriorBalance : @level : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : @level : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUG 2;      # @parameter%getPriorBalance : @level : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # pair (address %address) (nat %level) : @level : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CDR;        # nat : @level : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            COMPARE;    # int : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            LT;         # bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF
              {}
              {
                PUSH string "BLOCK_LEVEL_TOO_SOON"; # string : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }; # @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # if self.data.numCheckpoints.get(sp.fst(params).address, default_value = 0) == 0: # @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PUSH nat 0; # nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 3;      # @storage : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET 3;      # big_map address nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 3;      # @parameter%getPriorBalance : big_map address nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # pair (address %address) (nat %level) : big_map address nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # address : big_map address nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET;        # option nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF_NONE
              {
                PUSH nat 0; # nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
              }
              {
                # of_some: Get-item:92 # @some : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
              }; # nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            COMPARE;    # int : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            EQ;         # bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF
              {
                DIG 2;      # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : @parameter%getPriorBalance : @storage
                DROP;       # @parameter%getPriorBalance : @storage
                # sp.result(sp.record(address = sp.fst(params).address, level = sp.fst(params).level, result = 0)) # @parameter%getPriorBalance : @storage
                PUSH nat 0; # nat : @parameter%getPriorBalance : @storage
                SWAP;       # @parameter%getPriorBalance : nat : @storage
                DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : @storage
                CAR;        # pair (address %address) (nat %level) : @parameter%getPriorBalance : nat : @storage
                CDR;        # nat : @parameter%getPriorBalance : nat : @storage
                SWAP;       # @parameter%getPriorBalance : nat : nat : @storage
                DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : nat : @storage
                DUG 3;      # @parameter%getPriorBalance : nat : nat : @parameter%getPriorBalance : @storage
                CAR;        # pair (address %address) (nat %level) : nat : nat : @parameter%getPriorBalance : @storage
                CAR;        # address : nat : nat : @parameter%getPriorBalance : @storage
                PAIR 3;     # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
              }
              {
                # if self.data.checkpoints[(sp.fst(params).address, sp.as_nat(self.data.numCheckpoints[sp.fst(params).address] - 1))].fromBlock <= sp.fst(params).level: # @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CAR;        # pair (address %address) (nat %level) : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CDR;        # nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DUP 3;      # @storage : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                GET 3;      # big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PUSH nat 1; # nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DUP 5;      # @storage : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                GET 3;      # big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DUP 5;      # @parameter%getPriorBalance : big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CAR;        # pair (address %address) (nat %level) : big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CAR;        # address : big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                GET;        # option nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                IF_NONE
                  {
                    PUSH int 96; # int : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:96 # @some : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                  }; # @some : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                SUB;        # int : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                ISNAT;      # option nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                IF_NONE
                  {
                    PUSH int 96; # int : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DUP 4;      # @parameter%getPriorBalance : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CAR;        # pair (address %address) (nat %level) : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CAR;        # address : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PAIR;       # pair address @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                GET;        # option (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                IF_NONE
                  {
                    PUSH int 96; # int : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:96 # @some : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                  }; # @some : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                CAR;        # nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                COMPARE;    # int : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                LE;         # bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                IF
                  {
                    DIG 2;      # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : @parameter%getPriorBalance : @storage
                    DROP;       # @parameter%getPriorBalance : @storage
                    SWAP;       # @storage : @parameter%getPriorBalance
                    # sp.result(sp.record(address = sp.fst(params).address, level = sp.fst(params).level, result = self.data.checkpoints[(sp.fst(params).address, sp.as_nat(self.data.numCheckpoints[sp.fst(params).address] - 1))].balance)) # @storage : @parameter%getPriorBalance
                    DUP;        # @storage : @storage : @parameter%getPriorBalance
                    DUG 2;      # @storage : @parameter%getPriorBalance : @storage
                    CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : @parameter%getPriorBalance : @storage
                    GET 3;      # big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    PUSH nat 1; # nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    DUP 4;      # @storage : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    GET 3;      # big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    DUP 4;      # @parameter%getPriorBalance : big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    CAR;        # pair (address %address) (nat %level) : big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    CAR;        # address : big_map address nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    GET;        # option nat : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    IF_NONE
                      {
                        PUSH int 98; # int : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:98 # @some : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                      }; # @some : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    SUB;        # int : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    ISNAT;      # option nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    IF_NONE
                      {
                        PUSH int 98; # int : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    DUP 3;      # @parameter%getPriorBalance : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    CAR;        # pair (address %address) (nat %level) : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    CAR;        # address : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    PAIR;       # pair address @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    GET;        # option (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                    IF_NONE
                      {
                        PUSH int 98; # int : @parameter%getPriorBalance : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:98 # @some : @parameter%getPriorBalance : @storage
                      }; # @some : @parameter%getPriorBalance : @storage
                    CDR;        # nat : @parameter%getPriorBalance : @storage
                    SWAP;       # @parameter%getPriorBalance : nat : @storage
                    DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : @storage
                    CAR;        # pair (address %address) (nat %level) : @parameter%getPriorBalance : nat : @storage
                    CDR;        # nat : @parameter%getPriorBalance : nat : @storage
                    SWAP;       # @parameter%getPriorBalance : nat : nat : @storage
                    DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : nat : @storage
                    DUG 3;      # @parameter%getPriorBalance : nat : nat : @parameter%getPriorBalance : @storage
                    CAR;        # pair (address %address) (nat %level) : nat : nat : @parameter%getPriorBalance : @storage
                    CAR;        # address : nat : nat : @parameter%getPriorBalance : @storage
                    PAIR 3;     # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
                  }
                  {
                    # if self.data.checkpoints[(sp.fst(params).address, 0)].fromBlock > sp.fst(params).level: # @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    CAR;        # pair (address %address) (nat %level) : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    CDR;        # nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    DUP 3;      # @storage : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    GET 3;      # big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    PUSH nat 0; # nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    DUP 4;      # @parameter%getPriorBalance : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    CAR;        # pair (address %address) (nat %level) : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    CAR;        # address : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    PAIR;       # pair address nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    GET;        # option (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    IF_NONE
                      {
                        PUSH int 104; # int : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:104 # @some : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                      }; # @some : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    CAR;        # nat : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    COMPARE;    # int : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    GT;         # bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                    IF
                      {
                        DIG 2;      # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : @parameter%getPriorBalance : @storage
                        DROP;       # @parameter%getPriorBalance : @storage
                        # sp.result(sp.record(address = sp.fst(params).address, level = sp.fst(params).level, result = 0)) # @parameter%getPriorBalance : @storage
                        PUSH nat 0; # nat : @parameter%getPriorBalance : @storage
                        SWAP;       # @parameter%getPriorBalance : nat : @storage
                        DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : @storage
                        CAR;        # pair (address %address) (nat %level) : @parameter%getPriorBalance : nat : @storage
                        CDR;        # nat : @parameter%getPriorBalance : nat : @storage
                        SWAP;       # @parameter%getPriorBalance : nat : nat : @storage
                        DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : nat : @storage
                        DUG 3;      # @parameter%getPriorBalance : nat : nat : @parameter%getPriorBalance : @storage
                        CAR;        # pair (address %address) (nat %level) : nat : nat : @parameter%getPriorBalance : @storage
                        CAR;        # address : nat : nat : @parameter%getPriorBalance : @storage
                        PAIR 3;     # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
                      }
                      {
                        # centerIsNeedle = sp.local("centerIsNeedle", False) # @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        PUSH bool False; # bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        # center = sp.local("center", 0) # bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        PUSH nat 0; # nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        # lower = sp.local("lower", 0) # nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        PUSH nat 0; # nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        # upper = sp.local("upper", sp.as_nat(self.data.numCheckpoints[sp.fst(params).address] - 1)) # nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        PUSH nat 1; # nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DUP 6;      # @storage : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        GET 3;      # big_map address nat : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DUP 6;      # @parameter%getPriorBalance : big_map address nat : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        CAR;        # pair (address %address) (nat %level) : big_map address nat : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        CAR;        # address : big_map address nat : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        GET;        # option nat : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        IF_NONE
                          {
                            PUSH int 115; # int : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:115 # @some : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                          }; # @some : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        SUB;        # int : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        ISNAT;      # option nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        IF_NONE
                          {
                            PUSH int 115; # int : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        SWAP;       # nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        # while (upper.value > lower.value) & (centerIsNeedle.value == False) : ... # nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DUP;        # nat : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DUG 2;      # nat : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        SWAP;       # @some : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DUP;        # @some : @some : nat : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DUG 2;      # @some : nat : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        COMPARE;    # int : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        GT;         # bool : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        IF
                          {
                            PUSH bool False; # bool : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP 5;      # bool : bool : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            COMPARE;    # int : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            EQ;         # bool : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                          }
                          {
                            PUSH bool False; # bool : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                          }; # bool : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        LOOP
                          {
                            DIG 2;      # nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DROP;       # @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            # center.value = sp.as_nat(upper.value - (sp.as_nat(upper.value - lower.value) // 2)) # @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            PUSH nat 2; # nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP 3;      # nat : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP 3;      # @some : nat : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            SUB;        # int : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            ISNAT;      # option nat : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            IF_NONE
                              {
                                PUSH int 119; # int : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            EDIV;       # option (pair nat nat) : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            IF_NONE
                              {
                                PUSH int 119; # int : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                FAILWITH;   # FAILED
                              }
                              {
                                CAR;        # nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                              }; # nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            SWAP;       # @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP;        # @some : @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUG 2;      # @some : nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            SUB;        # int : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            ISNAT;      # option nat : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            IF_NONE
                              {
                                PUSH int 119; # int : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @some : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUG 2;      # @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            # if self.data.checkpoints[(sp.fst(params).address, center.value)].fromBlock == sp.fst(params).level: # @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP 5;      # @parameter%getPriorBalance : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            CAR;        # pair (address %address) (nat %level) : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            CDR;        # nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP 7;      # @storage : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            GET 3;      # big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP 5;      # @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP 8;      # @parameter%getPriorBalance : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            CAR;        # pair (address %address) (nat %level) : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            CAR;        # address : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            PAIR;       # pair address @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            GET;        # option (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            IF_NONE
                              {
                                PUSH int 122; # int : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                FAILWITH;   # FAILED
                              }
                              {
                                # of_some: Get-item:122 # @some : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                              }; # @some : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            CAR;        # nat : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            COMPARE;    # int : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            EQ;         # bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            IF
                              {
                                DIG 3;      # bool : @some : nat : @some : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                DROP;       # @some : nat : @some : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                # centerIsNeedle.value = True # @some : nat : @some : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                PUSH bool True; # bool : @some : nat : @some : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                DUG 3;      # @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                              }
                              {
                                # if self.data.checkpoints[(sp.fst(params).address, center.value)].fromBlock < sp.fst(params).level: # @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                DUP 5;      # @parameter%getPriorBalance : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                CAR;        # pair (address %address) (nat %level) : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                CDR;        # nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                DUP 7;      # @storage : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                GET 3;      # big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                DUP 5;      # @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                DUP 8;      # @parameter%getPriorBalance : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                CAR;        # pair (address %address) (nat %level) : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                CAR;        # address : @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                PAIR;       # pair address @some : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                GET;        # option (pair (nat %fromBlock) (nat %balance)) : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                IF_NONE
                                  {
                                    PUSH int 125; # int : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    # of_some: Get-item:125 # @some : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                  }; # @some : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                CAR;        # nat : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                COMPARE;    # int : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                LT;         # bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                IF
                                  {
                                    SWAP;       # nat : @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    DROP;       # @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    SWAP;       # @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    # lower.value = center.value # @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    DUP;        # @some : @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    DUG 2;      # @some : @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    SWAP;       # @some : @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                  }
                                  {
                                    DROP;       # nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    # upper.value = sp.as_nat(center.value - 1) # nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    PUSH nat 1; # nat : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    DUP 3;      # @some : nat : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    SUB;        # int : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    ISNAT;      # option nat : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                    IF_NONE
                                      {
                                        PUSH int 128; # int : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                        FAILWITH;   # FAILED
                                      }
                                      {}; # @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                  }; # @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                              }; # @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            SWAP;       # nat : @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            # check for next loop: (upper.value > lower.value) & (centerIsNeedle.value == False) # nat : @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP;        # nat : nat : @some : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUG 2;      # nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            SWAP;       # @some : nat : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUP;        # @some : @some : nat : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DUG 2;      # @some : nat : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            COMPARE;    # int : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            GT;         # bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            IF
                              {
                                PUSH bool False; # bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                DUP 5;      # bool : bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                COMPARE;    # int : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                                EQ;         # bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                              }
                              {
                                PUSH bool False; # bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                              }; # bool : @some : nat : @some : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                          }; # @some : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DROP;       # nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        # if centerIsNeedle.value == True: # nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        PUSH bool True; # bool : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        DUP 4;      # bool : bool : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        COMPARE;    # int : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        EQ;         # bool : nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                        IF
                          {
                            DROP;       # nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            SWAP;       # bool : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DROP;       # nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DIG 3;      # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : nat : @parameter%getPriorBalance : @storage
                            DROP;       # nat : @parameter%getPriorBalance : @storage
                            # sp.result(sp.record(address = sp.fst(params).address, level = sp.fst(params).level, result = self.data.checkpoints[(sp.fst(params).address, center.value)].balance)) # nat : @parameter%getPriorBalance : @storage
                            DUP 3;      # @storage : nat : @parameter%getPriorBalance : @storage
                            CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : nat : @parameter%getPriorBalance : @storage
                            GET 3;      # big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage
                            SWAP;       # nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            DUP 3;      # @parameter%getPriorBalance : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            CAR;        # pair (address %address) (nat %level) : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            CAR;        # address : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            PAIR;       # pair address nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            GET;        # option (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            IF_NONE
                              {
                                PUSH int 134; # int : @parameter%getPriorBalance : @storage
                                FAILWITH;   # FAILED
                              }
                              {
                                # of_some: Get-item:134 # @some : @parameter%getPriorBalance : @storage
                              }; # @some : @parameter%getPriorBalance : @storage
                            CDR;        # nat : @parameter%getPriorBalance : @storage
                            SWAP;       # @parameter%getPriorBalance : nat : @storage
                            DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : @storage
                            CAR;        # pair (address %address) (nat %level) : @parameter%getPriorBalance : nat : @storage
                            CDR;        # nat : @parameter%getPriorBalance : nat : @storage
                            SWAP;       # @parameter%getPriorBalance : nat : nat : @storage
                            DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : nat : @storage
                            DUG 3;      # @parameter%getPriorBalance : nat : nat : @parameter%getPriorBalance : @storage
                            CAR;        # pair (address %address) (nat %level) : nat : nat : @parameter%getPriorBalance : @storage
                            CAR;        # address : nat : nat : @parameter%getPriorBalance : @storage
                            PAIR 3;     # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
                          }
                          {
                            SWAP;       # nat : nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DROP;       # nat : bool : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            SWAP;       # bool : nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DROP;       # nat : @parameter%getPriorBalance : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                            DIG 3;      # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : nat : @parameter%getPriorBalance : @storage
                            DROP;       # nat : @parameter%getPriorBalance : @storage
                            # sp.result(sp.record(address = sp.fst(params).address, level = sp.fst(params).level, result = self.data.checkpoints[(sp.fst(params).address, lower.value)].balance)) # nat : @parameter%getPriorBalance : @storage
                            DUP 3;      # @storage : nat : @parameter%getPriorBalance : @storage
                            CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : nat : @parameter%getPriorBalance : @storage
                            GET 3;      # big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : nat : @parameter%getPriorBalance : @storage
                            SWAP;       # nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            DUP 3;      # @parameter%getPriorBalance : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            CAR;        # pair (address %address) (nat %level) : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            CAR;        # address : nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            PAIR;       # pair address nat : big_map (pair address nat) (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            GET;        # option (pair (nat %fromBlock) (nat %balance)) : @parameter%getPriorBalance : @storage
                            IF_NONE
                              {
                                PUSH int 143; # int : @parameter%getPriorBalance : @storage
                                FAILWITH;   # FAILED
                              }
                              {
                                # of_some: Get-item:143 # @some : @parameter%getPriorBalance : @storage
                              }; # @some : @parameter%getPriorBalance : @storage
                            CDR;        # nat : @parameter%getPriorBalance : @storage
                            SWAP;       # @parameter%getPriorBalance : nat : @storage
                            DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : @storage
                            CAR;        # pair (address %address) (nat %level) : @parameter%getPriorBalance : nat : @storage
                            CDR;        # nat : @parameter%getPriorBalance : nat : @storage
                            SWAP;       # @parameter%getPriorBalance : nat : nat : @storage
                            DUP;        # @parameter%getPriorBalance : @parameter%getPriorBalance : nat : nat : @storage
                            DUG 3;      # @parameter%getPriorBalance : nat : nat : @parameter%getPriorBalance : @storage
                            CAR;        # pair (address %address) (nat %level) : nat : nat : @parameter%getPriorBalance : @storage
                            CAR;        # address : nat : nat : @parameter%getPriorBalance : @storage
                            PAIR 3;     # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
                          }; # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
                      }; # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
                  }; # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
              }; # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
            # sp.transfer(__s18.value, sp.tez(0), sp.snd(params)) # pair address (pair nat nat) : @parameter%getPriorBalance : @storage
            NIL operation; # list operation : pair address (pair nat nat) : @parameter%getPriorBalance : @storage
            DIG 2;      # @parameter%getPriorBalance : list operation : pair address (pair nat nat) : @storage
            CDR;        # contract (pair (address %address) (pair (nat %level) (nat %result))) : list operation : pair address (pair nat nat) : @storage
            PUSH mutez 0; # mutez : contract (pair (address %address) (pair (nat %level) (nat %result))) : list operation : pair address (pair nat nat) : @storage
            DIG 3;      # pair address (pair nat nat) : mutez : contract (pair (address %address) (pair (nat %level) (nat %result))) : list operation : @storage
            TRANSFER_TOKENS; # operation : list operation : @storage
            CONS;       # list operation : @storage
          }
          {
            # == release ==
            # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = sp.sender, token_id = self.data.tokenID, amount = params.value)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), self.data.tokenContractAddress, entry_point='transfer').open_some()) # @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            NIL operation; # list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 3;      # @storage : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET 5;      # address : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF_NONE
              {
                PUSH int 225; # int : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PUSH mutez 0; # mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 6;      # @parameter%release : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 8;      # @storage : @parameter%release : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET 6;      # nat : @parameter%release : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : nat : @parameter%release : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR 3;     # pair @sender (pair nat @parameter%release) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            TRANSFER_TOKENS; # operation : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CONS;       # list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SWAP;       # @parameter%release : list operation : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # sp.verify(self.data.balances[sp.sender] >= params.value, 'LOW_BALANCE') # @parameter%release : list operation : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP;        # @parameter%release : @parameter%release : list operation : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUG 2;      # @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 4;      # @storage : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # big_map address nat : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : big_map address nat : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET;        # option nat : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF_NONE
              {
                PUSH int 256; # int : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:256 # @some : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
              }; # @some : @parameter%release : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            COMPARE;    # int : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GE;         # bool : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF
              {}
              {
                PUSH string "LOW_BALANCE"; # string : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }; # list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # if ~ (self.data.balances.contains(sp.sender)): # list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 3;      # @storage : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # big_map address nat : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : big_map address nat : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            MEM;        # bool : list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF
              {}
              {
                # self.data.balances[sp.sender] = 0 # list operation : @parameter%release : @storage : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DIG 2;      # @storage : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                UNPAIR;     # pair (big_map %balances address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                UNPAIR;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PUSH (option nat) (Some 0); # option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                SENDER;     # @sender : option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                UPDATE;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PAIR;       # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                PAIR;       # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : list operation : @parameter%release : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                DUG 2;      # list operation : @parameter%release : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
              }; # list operation : @parameter%release : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # self.data.balances[sp.sender] = sp.as_nat(self.data.balances[sp.sender] - params.value) # list operation : @parameter%release : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUP 3;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : list operation : @parameter%release : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            UNPAIR;     # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            UNPAIR;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : @parameter%release : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DIG 4;      # @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DIG 5;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            CAR;        # big_map address nat : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : big_map address nat : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            GET;        # option nat : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF_NONE
              {
                PUSH int 259; # int : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:259 # @some : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
              }; # @some : @parameter%release : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SUB;        # int : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            ISNAT;      # option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            IF_NONE
              {
                PUSH int 259; # int : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
                FAILWITH;   # FAILED
              }
              {}; # @some : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SOME;       # option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SENDER;     # @sender : option nat : big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            UPDATE;     # big_map address nat : pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR;       # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR;       # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : list operation : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            SWAP;       # list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            # compute_escrow_264 = sp.local("compute_escrow_264", self.writeCheckpoint(sp.record(checkpointedAddress = sp.sender, numCheckpoints = self.data.numCheckpoints.get(sp.sender, default_value = 0), newBalance = self.data.balances[sp.sender]))) # list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            DUG 2;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation
            DUP;        # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation
            DUG 3;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CAR;        # pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes)) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            CAR;        # big_map address nat : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SENDER;     # @sender : big_map address nat : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            GET;        # option nat : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            IF_NONE
              {
                PUSH int 268; # int : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:268 # @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }; # @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DUP 4;      # pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            GET 3;      # big_map address nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SENDER;     # @sender : big_map address nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            GET;        # option nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            IF_NONE
              {
                PUSH nat 0; # nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }
              {
                # of_some: Get-item:267 # @some : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
              }; # nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SENDER;     # @sender : nat : @some : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            PAIR 3;     # pair @sender (pair nat @some) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            SWAP;       # lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) : pair @sender (pair nat @some) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID)))
            DUG 3;      # pair @sender (pair nat @some) : list operation : pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            PAIR 3;     # pair (pair @sender (pair nat @some)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map %checkpoints (pair address nat) (pair (nat %fromBlock) (nat %balance))) (big_map %metadata string bytes))) (pair (big_map %numCheckpoints address nat) (pair (address %tokenContractAddress) (nat %tokenID))))) : lambda (pair (pair address (pair nat nat)) (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))) (pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))))
            EXEC;       # pair unit (pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))))
            CDR;        # pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))
            UNPAIR;     # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
          }; # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
      }; # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
    NIL operation; # list operation : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
    SWAP;       # list operation : list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
    ITER
      {
        CONS;       # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
      }; # list operation : pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat))
    PAIR;       # pair (list operation) (pair (pair (big_map address nat) (pair (big_map (pair address nat) (pair nat nat)) (big_map string bytes))) (pair (big_map address nat) (pair address nat)))
  };